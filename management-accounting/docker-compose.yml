version: "3.9"

networks:
  appnet: {}

services:
  db:
    image: postgres:16
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/db:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    user: "1000:1000"
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis:/data:rw
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"

  api:
    build: ./api
    container_name: api
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      APP_URL: ${APP_URL}
    depends_on:
      - db
      - redis
    user: "1000:1000"
    init: true
    ports:
      - "8000:8000"
    volumes:
      - ./volumes/uploads:/srv/finance/uploads:rw
      - ./volumes/logs:/var/log/finance:rw
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"

  worker:
    build: ./api
    container_name: worker
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
    user: "1000:1000"
    init: true
    command: ["celery", "-A", "app.worker.celery_app", "worker", "-Q", "parse", "--loglevel=INFO"]
    volumes:
      - ./volumes/uploads:/srv/finance/uploads:rw
      - ./volumes/logs:/var/log/finance:rw
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.worker.celery_app status | grep -q 'OK' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"

  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    env_file: .env
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      APP_URL: ${APP_URL}
    depends_on:
      - api
    user: "1000:1000"
    init: true
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1"]
    security_opt:
      - no-new-privileges:true
    networks:
      - appnet
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
